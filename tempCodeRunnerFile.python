def solve(ar):
    total_sum = sum(ar)
    n = len(ar)
    
    # Initialize a DP array with False values
    dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)]
    
    # Base case: We can always form a subset with sum 0
    for i in range(n + 1):
        dp[i][0] = True
    
    # Fill the DP table
    for i in range(1, n + 1):
        for j in range(1, total_sum // 2 + 1):
            if ar[i-1] <= j:
                dp[i][j] = dp[i-1][j] or dp[i-1][j-ar[i-1]]
            else:
                dp[i][j] = dp[i-1][j]
    
    # Find the maximum sum possible for the first subset
    for j in range(total_sum // 2, -1, -1):
        if dp[n][j]:
            subset_sum = j
            break
    
    other_subset_sum = total_sum - subset_sum
    
    # The minimum difference is the difference between the two subset sums
    return abs(other_subset_sum - subset_sum)

if _name_ == '_main_':
    ar_count = int(input().strip())
    ar = list(map(int, input().rstrip().split()))
    
    outcome = solve(ar)
    print(outcome)